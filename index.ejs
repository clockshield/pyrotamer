<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>Prototype App</title>
    <style type="text/css">
      /* Set the size of the div element that contains the map */
      #map {
        height: 400px;
        /* The height is 400 pixels 
        <!-- Geocoder plugin -->
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css' type='text/css' />
<!-- Turf.js plugin -->
<script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>*/
        width: 50%;
        /* The width is the width of the web page */
        
      }
    </style>
        <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://unpkg.com/@google/markerclustererplus@4.0.1/dist/markerclustererplus.min.js"></script>
        
    <link rel="stylesheet" type="text/css" href="./style.css" />
     <script type = "text/javascript">
        //showing your own location 
         function showLocation(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            alert("Latitude : " + latitude + " Longitude: " + longitude);
         }
         //error handling in case position finding is not allowed.
         function errorHandler(err) {
            if(err.code == 1) {
               alert("Error: Access is denied!");
            } else if( err.code == 2) {
               alert("Error: Position is unavailable!");
            }
         }
            
         function getLocation() {
            if(navigator.geolocation) {
               
               // timeout at 60000 milliseconds (60 seconds)
               var options = {timeout:60000};
               navigator.geolocation.getCurrentPosition(showLocation, errorHandler, options);
            } else {
               alert("Sorry, browser does not support geolocation!");
            }
         }
            
      </script>
    <meta charset="utf-8" />
                <title>Demo: Add custom markers in Mapbox GL JS</title>
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            <!--  linking google fonts-->
                <link
                href="https://fonts.googleapis.com/css?family=Open+Sans"
                rel="stylesheet"
                />
                <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.js"></script>
                <link
                href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.2.0/mapbox-gl.css"
                rel="stylesheet"
                />
            <style>
            body { margin: 0; padding: 0; }
/*                //mapbox icon and defining the map*/
            #map { position: absolute; top: 100; bottom: 100; width: 100%; }
            .marker {
          background-image: url('https://docs.mapbox.com/help/demos/custom-markers-gl-js/mapbox-icon.png');
          background-size: cover;
          width: 50px;
          height: 50px;
          border-radius: 50%;
          cursor: pointer;
        }
        .mapboxgl-popup {
        max-width: 200px;
        }
        .mapboxgl-popup-content {
        text-align: center;
        font-family: 'Open Sans', sans-serif;
        }
            </style>
            <!-- Geocoder plugin -->
<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js'></script>
<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css' type='text/css' />

<!-- Turf.js plugin -->
<script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>

  </head> 

    <body>
         <style>
        .distance-container {
        position: absolute;
        top: 450px;
        left: 10px;
        z-index: 1;
        }
         
        .distance-container > * {
        background-color: rgba(0, 0, 0, 0.5);
        color: #fff;
        font-size: 11px;
        line-height: 18px;
        display: block;
        margin: 0;
        padding: 5px 10px;
        border-radius: 3px;
        }
        </style>
        <h1>Enter Name, Latitude, Longitude and Category</h1>
        <!-- POST function putting the values into the database -->

        <form action="/points" method="POST">
            <input type="text" placeholder="name" name="name" />
            <input type="float" placeholder="latitude" name="latitude" />
            <input type="float" placeholder="longitude" name="longitude" />
              <select name = 'myselect'>
                <option value="Hand Lines">Hand Lines</option>
                <option value="Dozer Lines">Dozer Lines</option>
                <option value="Fire Truck">Fire Truck</option>
                
              </select>



            <button type="submit">Submit</button>
        </form>
        <!-- PUT function updating already pre existing values -->
        <h2> Update </h2>
        <section>
            <div>
                <form id="update">
                    <input type="text" placeholder="new name" id ="new name"/>
                    <input type="float" placeholder="new latitude" id = "new latitude"/>
                    <input type="float" placeholder="new longitude" id = "new longitude"/>
                     <select name = 'myselect'>
                        <option value="Hand Lines">Hand Lines</option>
                        <option value="Dozer Lines">Dozer Lines</option>
                        <option value="Fire Truck">Fire Truck</option>
                        
                      </select>
                    <button>Submit</button>
                </form>
            </div>
        </section>
<!--        uploading current position-->
        <h2> Geolocation</h2>
        <section> 
            <div>
                <form  id = "loca">
                    <input type = "text" placeholder = "geo name" id = "geo name" />
                    <button>Submit</button>
                </form>
            </div>
        </section>
        <h2> DrawLine </h2>
        <section>
            <div>
                <!-- POST functions for inputting line points into the database -->
                <form action = "/linepoints" method = "POST" id = "enter points">
                    <input type="float" placeholder="x-start point" id ="x1" name = "firstX"/>
                    <input type="float" placeholder="y-start point" id ="y1" name = "firstY"/>
                    <input type="float" placeholder="x-end point" id ="x2" name = "secondX"/>
                    <input type="float" placeholder="y-end point" id ="y2" name = "secondY"/>
                    <button id = "delete button">Submit</button>
                </form>
            </div>
            <div id="message"></div>

        </section>
        <script></script>
         <h2> Delete </h2>
        <section>
            <div>
                <!-- deleting a value -->
                <form id="delete">
                    <input type="text" placeholder="delete name" id ="delete name"/>
                    <button id = "delete button">Delete</button>
                </form>
            </div>
            <div id="message"></div>
        </section>
        <script src = "main.js"></script>
        
        <h2> Points </h2>
 <!-- Posting all the points in the database(not line points) -->
        <ul class="points">
            <!-- Loop through quotes -->
            <% for(var i = 0; i < points.length; i++) {%>
                <% if(points[i].name !== "") {%>
                <li class="point">
                    <span><%= points[i].name %></span>: 
                    <span><%= points[i].latitude %></span>
                    <span><%= points[i].longitude %></span>
                     <span><%= points[i].myselect %></span>
                </li>
            <% }} %>
        </ul>

    
    <div id="map"></div>
   
         
        
        <div id="distance" class="distance-container"></div>
         
        <script src="https://unpkg.com/@turf/turf@6/turf.min.js"></script>


       
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <script>
             
            mapboxgl.accessToken = 'pk.eyJ1IjoieXV0dTAwIiwiYSI6ImNrbjE2MmVyazBraXUycG1oczE2NHJqZGMifQ.H-XiIr0ryuMqyN7_vvB-6A';
            //creating the map
            var map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/atann/cknmjlzsk3osb17odr8d8ga4z', // style URL
            center: [-74.5, 40], // starting position [lng, lat]
            zoom: 9 // starting zoom
            });
           
            var distanceContainer = document.getElementById('distance');
            
             var geojson = {
        'type': 'FeatureCollection',
        'features': [
         
        ]
      };
    //helper function to create json for the feature push
    function createFeature(name,lat,lng){
        var y = {
            'type': 'Feature',
          'geometry' : {
            'type': 'Point', 
            'coordinates': [lng,lat]
           },
           'properties':{
            'title':'Location',
            'description':name
            }
           };
         return y;
      }
            //pushing on points onto the map with every location on the database
//        geojson.features.push(createFeature("CHINA TOWN",4,4));
        <%for(var i = 0; i < points.length; i++){ %>
            geojson.features.push(createFeature("<%=points[i].name%>",<%=points[i].latitude%>,<%= points[i].longitude%>));
            
        <%}%>
        
  geojson.features.forEach(function (marker) {
        // create a HTML element for each feature
        var el = document.createElement('div');
        el.className = 'marker';
        
        // make a marker for each feature and add it to the map
        new mapboxgl.Marker(el)
          .setLngLat(marker.geometry.coordinates)
          .setPopup(
            new mapboxgl.Popup({ offset: 25 }) // add popups
              .setHTML(
                '<h3>' +
                  marker.properties.title +
                  '</h3><p>' +
                  marker.properties.description +
                  '</p>'
              )
          )
          .addTo(map);
      });
    
         
        // Add geolocate control to the map.
        map.addControl(
        new mapboxgl.GeolocateControl({
        positionOptions: {
        enableHighAccuracy: true
        },
        trackUserLocation: true
        })
        );
// GeoJSON object to hold our measurement features
            var geojson = {
            'type': 'FeatureCollection',
            'features': []
            };
            var fires = {
                "type": "FeatureCollection", "features":
                [
                {
                  "type": "Feature",
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                      37.37704666042266, -122.03874004968344
                    ]
                  },
                  "properties": {
                    "phoneFormatted": "(408) 730-7100",
                    "phone": "4087307100",
                    "address": "700 All American Way",
                    "city": "Sunnyvale",
                    "country": "United States",
                    "postalCode": "94086",
                    "state": "CA"
                  }
                },
                 {
                  "type": "Feature",
                  "geometry": {
                    "type": "Point",
                    "coordinates": [
                     37.32986792821143, -122.02397960454111
                    ]
                  },
                  "properties": {
                    "phoneFormatted": "(408) 299-3144",
                    "phone": "4082993144",
                    "address": "20215 Stevens Creek Blvd",
                    "city": "Cupertino",
                    "country": "United States",
                    "postalCode": "95014",
                    "state": "CA"
                  }
                }
                ]
            };
            /*
            fires.features.forEach(function(fire, i){
              fires.properties.id = i;
            });
            */
            map.on('load', function (e) {
                  /* Add the data to your map as a layer */
                  map.addLayer({
                    "id": "locations",
                    "type": "circle",
                    /* Add a GeoJSON source containing place coordinates and information. */
                    "source": {
                      "type": "geojson",
                      "data": fires
                    }
                  });
                });
             var geocoder = new MapboxGeocoder({
              accessToken: mapboxgl.accessToken, // Set the access token
              mapboxgl: mapboxgl, // Set the mapbox-gl instance
              marker: true, // Use the geocoder's default marker style
              bbox: [-122.55079378304764,36.962127036976085,-121.30074534129199,38.06144359131045] // Set the bounding box coordinates
            });
            map.addControl(geocoder, 'top-left');
            // Used to draw a line between points
            var linestring = {
            'type': 'Feature',
            'geometry': {
            'type': 'LineString',
            'coordinates': []
            }
            };
             
            map.on('load', function () {
            map.addSource('geojson', {
            'type': 'geojson',
            'data': geojson
            });
             
            // Add styles to the map
            map.addLayer({
            id: 'measure-points',
            type: 'circle',
            source: 'geojson',
            paint: {
            'circle-radius': 5,
            'circle-color': '#000'
            },
            filter: ['in', '$type', 'Point']
            });
            map.addLayer({
            id: 'measure-lines',
            type: 'line',
            source: 'geojson',
            layout: {
            'line-cap': 'round',
            'line-join': 'round'
            },
            paint: {
            'line-color': '#000',
            'line-width': 2.5
            },
            filter: ['in', '$type', 'LineString']
            });
             
            map.on('click', function (e) {
            var features = map.queryRenderedFeatures(e.point, {
            layers: ['measure-points']
            });
             
            // Remove the linestring from the group
            // So we can redraw it based on the points collection
            if (geojson.features.length > 1) geojson.features.pop();
             
            // Clear the Distance container to populate it with a new value
            distanceContainer.innerHTML = '';
             
            // If a feature was clicked, remove it from the map
            if (features.length) {
            var id = features[0].properties.id;
            geojson.features = geojson.features.filter(function (point) {
            return point.properties.id !== id;
            });
            } else {
            var point = {
            'type': 'Feature',
            'geometry': {
            'type': 'Point',
            'coordinates': [e.lngLat.lng, e.lngLat.lat]
            },
            'properties': {
            'id': String(new Date().getTime())
            }
            };
             
            geojson.features.push(point);
            }
             
            if (geojson.features.length > 1) {
            linestring.geometry.coordinates = geojson.features.map(
            function (point) {
            return point.geometry.coordinates;
            }
            );
             
            geojson.features.push(turf.bezierSpline(linestring));
             
            // Populate the distanceContainer with total distance
            var value = document.createElement('pre');
            value.textContent =
            'Total distance: ' +
            turf.length(linestring).toLocaleString() +
            'km';
            distanceContainer.appendChild(value);
            }
             
            map.getSource('geojson').setData(geojson);
            });
            });
             
//            map.on('mousemove', function (e) {
//            var features = map.queryRenderedFeatures(e.point, {
//            layers: ['measure-points']
//            });
            // UI indicator for clicking/hovering a point on the map
            
            var startingPoint = {
                type: "FeatureCollection",
                features: [ 
                    {type: "feature",
                    properties: {
                        name: "startingPointDefault"
                    },
                    geometry: {
                        type: "Point",
                        coordinates: [50, 15],
                    }}
                ]
            }
            var endingPoint = {
                type: "FeatureCollection",
                features: [ 
                   { type: "feature",
                    properties: {
                        name: "endingPointDefault"
                    },
                    geometry: {
                        type: "Point",
                        coordinates: [12, 60],
                    }}
                ]
            }
            map.on('load', function() {
                  map.addLayer({
                    id: 'startingPoint',
                    type: 'symbol',
                    source: {
                      type: 'geojson',
                      data: startingPoint
                    },
                    layout: {
                      'icon-image': 'hospital-15',
                      'icon-allow-overlap': true
                    },
                    paint: { }
                  });
                  map.addLayer({
                    id: 'endingPoint',
                    type: 'symbol',
                    source: {
                      type: 'geojson',
                      data: endingPoint
                    },
                    layout: {
                      'icon-image': 'library-15'
                    },
                    paint: { }
                  });
                  
                });
            var popup = new mapboxgl.Popup();
//            map.on('mousemove', function(e) {
//              var features = map.queryRenderedFeatures(e.point, { layers: ['startingPoint', 'endingPoint'] });
//              if (!features.length) {
//                popup.remove();
//                return;
//              }
//              var feature = features[0];
//              popup.setLngLat(feature.geometry.coordinates)
//                .setHTML(feature.properties.name)
//                .addTo(map);
//              map.getCanvas().style.cursor = features.length ? 'pointer' : '';
//            });
//            
//            map.on('click', function(e) {
//              // Return any features from the 'libraries' layer whenever the map is clicked
//              var startingFeatures = map.queryRenderedFeatures(e.point, { layers: ['startingPoint'] });
//              if (!libraryFeatures.length) {
//                return;
//              }
//              var startingFeature = startingFeatures[0];
//              // Using Turf, find the nearest hospital to library clicked
//              var endingFeatures = turf.nearest(startingFeature, endingPoint);
//              // If a nearest library is found
//              if (endingFeatures !== null) {
//                // Update the 'nearest-library' data source to include
//                // the nearest library
//                map.getSource('ending-Feature').setData({
//                  type: 'FeatureCollection',
//                  features: [
//                    endingFeature
//                  ]
//                });
//                // Create a new circle layer from the 'nearest-library' data source
//                map.addLayer({
//                  id: 'ending-Feature',
//                  type: 'circle',
//                  source: 'ending-Feature',
//                  paint: {
//                    'circle-radius': 12,
//                    'circle-color': '#486DE0'
//                  }
//                }, 'endingPoint');
//              }
//            });
            
            
            
    function createLineFeature(x1,x2,y1,y2){
        var y = {
                'type': 'Feature',
                'geometry': {
                    'type': 'LineString',
                    'properties': {},
                    'coordinates': [
                        [x1, y1],
                        [x2, y2]
                    ]
                }
           };
         return y;
      }
    var linejson = {'type': 'FeatureCollection',
                'features': []
                   };
    <%for(var i = 0; i < linepoints.length; i++){ %>
        linejson.features.push(createLineFeature(<%=linepoints[i].firstX%>,<%=linepoints[i].secondX%>,<%= linepoints[i].firstY%>,<%= linepoints[i].secondY%>));   
    <%}%>
    //ADDING lines to the map
map.on('load', function () {
        map.addSource('route', {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': linejson
            }
        });
        map.addLayer({
            'id': 'route',
            'type': 'line',
            'source': 'route',
            'layout': {
                'line-join': 'round',
                'line-cap': 'round'
            },
            'paint': {
                'line-color': '#888',
                'line-width': 15
            }
        });
    });
//        var geojson1 = {
//        'type': 'FeatureCollection',
//        'features': [
//            {
//                'type': 'Feature',
//                'geometry': {
//                    'type': 'LineString',
//                    'properties': {},
//                    'coordinates': [
//                        [50, 15],
//                        [12, 60]
//                    ]
//                }
//            },
//            {
//                'type': 'Feature',
//                'geometry': {
//                    'type': 'LineString',
//                    'properties': {},
//                    'coordinates': [
//                        [50, 15],
//                        [12, 60]
//                    ]
//                }
//            }
//            
//        ]
//    };
    
 

            
        </script>
        


    </body>
</html>